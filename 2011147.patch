Index: src/main/org/langera/freud/optional/classfile/InstructionVisitor.java
===================================================================
--- src/main/org/langera/freud/optional/classfile/InstructionVisitor.java	(revision 35)
+++ src/main/org/langera/freud/optional/classfile/method/InstructionVisitor.java	(revision )
@@ -1,5 +1,7 @@
-package org.langera.freud.optional.classfile;
+package org.langera.freud.optional.classfile.method;
 
+import org.langera.freud.optional.classfile.Opcode;
+
 public interface InstructionVisitor
 {
     void instruction(final Opcode opcode);
Index: src/main/org/langera/freud/optional/classfile/parser/asm/AsmMethod.java
===================================================================
--- src/main/org/langera/freud/optional/classfile/parser/asm/AsmMethod.java	(revision 38)
+++ src/main/org/langera/freud/optional/classfile/parser/asm/AsmMethod.java	(revision )
@@ -3,10 +3,10 @@
 import org.langera.freud.optional.classfile.ClassFileInnerClass;
 import org.langera.freud.optional.classfile.ClassFileMethod;
 import org.langera.freud.optional.classfile.Instruction;
-import org.langera.freud.optional.classfile.InstructionVisitor;
 import org.langera.freud.optional.classfile.Label;
 import org.langera.freud.optional.classfile.LocalVariable;
 import org.langera.freud.optional.classfile.Opcode;
+import org.langera.freud.optional.classfile.method.InstructionVisitor;
 import org.objectweb.asm.AnnotationVisitor;
 import org.objectweb.asm.Attribute;
 import org.objectweb.asm.MethodVisitor;
Index: src/test/org/langera/examples/classfile/ClassFileExamples.java
===================================================================
--- src/test/org/langera/examples/classfile/ClassFileExamples.java	(revision 38)
+++ src/test/org/langera/examples/classfile/ClassFileExamples.java	(revision )
@@ -4,11 +4,12 @@
 import org.langera.freud.core.FreudAnalyser;
 import org.langera.freud.core.iterator.AnalysedObjectIterator;
 import org.langera.freud.optional.classfile.ClassFile;
+import org.langera.freud.optional.classfile.ClassFileMethod;
 
 import java.math.BigDecimal;
 
 import static org.langera.freud.core.matcher.FreudDsl.no;
-import static org.langera.freud.optional.classfile.ClassFileDsl.hasMethodInvocation;
+import static org.langera.freud.optional.classfile.method.MethodDsl.hasMethodInvocation;
 
 public final class ClassFileExamples
 {
@@ -19,13 +20,13 @@
 
     public static FreudAnalyser doNotUseBigDecimalToString(final AnalysedObjectIterator<ClassFile> iterator)
     {
-        return Freud.iterateOver(ClassFile.class).in(iterator).
+        return Freud.iterateOver(ClassFileMethod.class).within(iterator).
                 assertThat(no(hasMethodInvocation(BigDecimal.class, "toString")));
     }
 
     public static FreudAnalyser doNotUseBigDecimalEquals(final AnalysedObjectIterator<ClassFile> iterator)
     {
-        return Freud.iterateOver(ClassFile.class).in(iterator).
+        return Freud.iterateOver(ClassFileMethod.class).within(iterator).
                 assertThat(no(hasMethodInvocation(BigDecimal.class, "equals", Object.class)));
     }
 }
Index: src/test/org/langera/examples/classfile/AnalyseDoNotUseBigDecimalToStringTest.java
===================================================================
--- src/test/org/langera/examples/classfile/AnalyseDoNotUseBigDecimalToStringTest.java	(revision 38)
+++ src/test/org/langera/examples/classfile/AnalyseDoNotUseBigDecimalToStringTest.java	(revision )
@@ -5,7 +5,6 @@
 import org.hamcrest.TypeSafeMatcher;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.langera.freud.core.FreudAnalyser;
 import org.langera.freud.core.iterator.AnalysedObjectIterator;
@@ -39,7 +38,6 @@
     }
 
     @Test
-    @Ignore
     public void shouldFailWhenBigDecimalToStringIsUsedImplicitely() throws Exception
     {
         FreudAnalyser analyser = ClassFileExamples.doNotUseBigDecimalToString(
Index: src/main/org/langera/freud/optional/classfile/method/MethodDsl.java
===================================================================
--- src/main/org/langera/freud/optional/classfile/method/MethodDsl.java	(revision )
+++ src/main/org/langera/freud/optional/classfile/method/MethodDsl.java	(revision )
@@ -0,0 +1,69 @@
+package org.langera.freud.optional.classfile.method;
+
+import org.hamcrest.Description;
+import org.langera.freud.core.matcher.FreudMatcher;
+import org.langera.freud.optional.classfile.ClassFileMethod;
+import org.langera.freud.optional.classfile.Opcode;
+
+import java.util.Arrays;
+
+import static org.langera.freud.optional.classfile.method.AbstractInstructionVisitor.typeEncoding;
+
+public final class MethodDsl
+{
+
+    private MethodDsl()
+    {
+        // static utility
+    }
+
+    private static final String[] EMPTY_ARGS = new String[]{""};
+
+    public static FreudMatcher<ClassFileMethod> hasMethodInvocation(final Class expectedOwner, final String expectedMethodName, final Class... expectedParamsDeclared)
+    {
+        return new FreudMatcher<ClassFileMethod>()
+        {
+            private String expectedOwnerName;
+            private String[] expectedParamNames;
+
+            {
+                expectedOwnerName = typeEncoding(expectedOwner);
+                expectedParamNames = (expectedParamsDeclared.length == 0) ? EMPTY_ARGS : new String[expectedParamsDeclared.length];
+                for (int i = 0, size = expectedParamsDeclared.length; i < size; i++)
+                {
+                    expectedParamNames[i] = typeEncoding(expectedParamsDeclared[i]);
+
+                }
+            }
+
+            @Override
+            protected boolean matchesSafely(final ClassFileMethod item)
+            {
+                final boolean[] found = new boolean[1];
+                found[0] = false;
+                item.findInstruction(new AbstractInstructionVisitor()
+                {
+                    @Override
+                    public void methodInvocation(final Opcode opcode, final int lineNumber, final String owner, final String methodName, final String... args)
+                    {
+                        if (expectedOwnerName.equals(owner) &&
+                                expectedMethodName.equals(methodName) &&
+                                Arrays.equals(expectedParamNames, args))
+                        {
+                            found[0] = true;
+                        }
+
+                    }
+                }, Opcode.INVOKEVIRTUAL, Opcode.INVOKEDYNAMIC, Opcode.INVOKEINTERFACE, Opcode.INVOKESTATIC, Opcode.INVOKESPECIAL);
+                return found[0];
+            }
+
+            @Override
+            public void describeTo(final Description description)
+            {
+                description.appendText("hasMethodInvocation(" + expectedOwner.getName() + ", " + expectedMethodName + ")");
+            }
+        };
+    }
+
+}
Index: src/main/org/langera/freud/optional/classfile/ClassFileDsl.java
===================================================================
--- src/main/org/langera/freud/optional/classfile/ClassFileDsl.java	(revision 38)
+++ src/main/org/langera/freud/optional/classfile/ClassFileDsl.java	(revision )
@@ -1,18 +1,11 @@
 package org.langera.freud.optional.classfile;
 
-import org.hamcrest.Description;
-import org.langera.freud.core.matcher.FreudMatcher;
 import org.langera.freud.core.matcher.RegexMatcherAdapter;
 import org.langera.freud.core.matcher.RegexMatcherBuilder;
 
-import java.util.Arrays;
-
-import static org.langera.freud.optional.classfile.AbstractInstructionVisitor.typeEncoding;
-
 public final class ClassFileDsl
 {
 
-    private static final String[] EMPTY_ARGS = new String[]{""};
 
     private ClassFileDsl()
     {
@@ -36,57 +29,4 @@
             }
         });
     }
-
-    public static FreudMatcher<ClassFile> hasMethodInvocation(final Class expectedOwner, final String expectedMethodName, final Class... expectedParams)
-    {
-        return new FreudMatcher<ClassFile>()
-        {
-            private String expectedOwnerName;
-            private String[] expectedParamNames;
-
-            {
-                expectedOwnerName = typeEncoding(expectedOwner);
-                expectedParamNames = (expectedParams.length == 0) ? EMPTY_ARGS : new String[expectedParams.length];
-                for (int i = 0, size = expectedParams.length; i < size; i++)
-                {
-                    expectedParamNames[i] = typeEncoding(expectedParams[i]);
-
-                }
+}
-            }
-
-            @Override
-            protected boolean matchesSafely(final ClassFile item)
-            {
-                final boolean[] found = new boolean[1];
-                for (ClassFileMethod method : item.getMethodList())
-                {
-                    method.findInstruction(new AbstractInstructionVisitor()
-                        {
-                            @Override
-                            public void methodInvocation(final Opcode opcode, final int lineNumber, final String owner, final String methodName, final String... args)
-                            {
-                                if (expectedOwnerName.equals(owner) &&
-                                        expectedMethodName.equals(methodName) &&
-                                        Arrays.equals(expectedParamNames, args))
-                                {
-                                    found[0] = true;
-                                }
-
-                            }
-                        }, Opcode.INVOKEVIRTUAL, Opcode.INVOKEDYNAMIC, Opcode.INVOKEINTERFACE, Opcode.INVOKESTATIC, Opcode.INVOKESPECIAL);
-                    if (found[0])
-                    {
-                        return true;
-                    }
-                }
-                return false;
-            }
-
-            @Override
-            public void describeTo(final Description description)
-            {
-                description.appendText("hasMethodInvocation(" + expectedOwner.getName() + ", " + expectedMethodName + ")");
-            }
-        };
-    }
-}
Index: src/main/org/langera/freud/optional/classfile/Opcode.java
===================================================================
--- src/main/org/langera/freud/optional/classfile/Opcode.java	(revision 35)
+++ src/main/org/langera/freud/optional/classfile/Opcode.java	(revision )
@@ -1,5 +1,7 @@
 package org.langera.freud.optional.classfile;
 
+import org.langera.freud.optional.classfile.method.InstructionVisitor;
+
 public enum Opcode
 {
     NOP, // visitInsn
Index: src/main/org/langera/freud/optional/classfile/AbstractInstructionVisitor.java
===================================================================
--- src/main/org/langera/freud/optional/classfile/AbstractInstructionVisitor.java	(revision 35)
+++ src/main/org/langera/freud/optional/classfile/method/AbstractInstructionVisitor.java	(revision )
@@ -1,5 +1,7 @@
-package org.langera.freud.optional.classfile;
+package org.langera.freud.optional.classfile.method;
 
+import org.langera.freud.optional.classfile.Opcode;
+
 public abstract class AbstractInstructionVisitor implements InstructionVisitor
 {
     @Override
Index: src/main/org/langera/freud/optional/classfile/ClassFileMethod.java
===================================================================
--- src/main/org/langera/freud/optional/classfile/ClassFileMethod.java	(revision 38)
+++ src/main/org/langera/freud/optional/classfile/ClassFileMethod.java	(revision )
@@ -1,5 +1,7 @@
 package org.langera.freud.optional.classfile;
 
+import org.langera.freud.optional.classfile.method.InstructionVisitor;
+
 import java.util.List;
 
 public interface ClassFileMethod extends ClassFileElement
Index: src/test/org/langera/freud/optional/classfile/AbstractInstructionVisitorTest.java
===================================================================
--- src/test/org/langera/freud/optional/classfile/AbstractInstructionVisitorTest.java	(revision 35)
+++ src/test/org/langera/freud/optional/classfile/AbstractInstructionVisitorTest.java	(revision )
@@ -2,6 +2,7 @@
 
 import org.junit.Assert;
 import org.junit.Test;
+import org.langera.freud.optional.classfile.method.AbstractInstructionVisitor;
 
 public final class AbstractInstructionVisitorTest
 {
