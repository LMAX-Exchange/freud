/*
 * Copyright 2013 LMAX Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/limavencentrcenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



apply plugin: "idea"

task clean(overwrite: true) << {
    delete 'classes', 'out', "$buildDir"
}

subprojects {
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "maven"


    task writeNewPom << {
        pom {
            project {
                inceptionYear '2013'
                scm {
                    url = 'scm:git@github.com:LMAX-Exchange/freud.git'
                    connection = 'scm:git@github.com:LMAX-Exchange/freud.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'langera'
                        name = 'Amir Langer'
                        email = 'langera@gmail.com'
                    }
                }
            }
        }.writeTo("$buildDir/pom.xml")
    }


    repositories {
        mavenCentral()
        maven { url 'http://oss.sonatype.org/content/repositories/snapshots/' }
    }

    version = '2.0'
    jar {
        manifest {
            attributes 'Implementation-Title': 'spock-freud', 'Implementation-Version': version
        }
    }
}

idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}

def nonTransitive(Project... dependencies) {
    def deps = dependencies.collect { project.dependencies.create(it) }
    project.configure(deps, { transitive = false })
}

project(':freud-all') {
    dependencies {
        compile nonTransitive(
            project(':test-ext'),
            project(':core'),
            project(':core-parser'),
            project(':text'),
            project(':class-byte-code'),
            project(':properties'),
            project(':css'),
            project(':java-source'),
            project(':class-object'),
            project(':api-groovy'),
            project(':api-java'),
            project(':examples-junit'),
            project(':examples-spock'),
            project(':examples-resources')
        )
    }

    jar {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it)	} }
    }
}

project(':test-ext') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
    }
}

project(':core') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        testCompile fileTree('resources')
    }

    idea.module.iml {
        whenMerged { project ->
            project.dependencies.add(
                    new org.gradle.plugins.ide.idea.model.ModuleLibrary(
                            [new org.gradle.plugins.ide.idea.model.Path('file://$MODULE_DIR$/src/test/resources')], [], [], [], 'TEST'))
        }
    }
}

project(':core-parser') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        compile "jdom:jdom:1.1"
        compile "commons-jxpath:commons-jxpath:1.3"
        compile "org.antlr:antlr-runtime:3.2"
        compile project(':core')
    }
}


project(':examples-resources') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        compile "junit:junit:4.11"
        compile 'org.jmock:jmock:2.6.0'
        compile 'org.jmock:jmock-junit4:2.+'
    }
}

project(':text') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        testCompile fileTree('resources')
        compile project(':core')
    }

    idea.module.iml {
        whenMerged { project ->
            project.dependencies.add(
                    new org.gradle.plugins.ide.idea.model.ModuleLibrary(
                            [new org.gradle.plugins.ide.idea.model.Path('file://$MODULE_DIR$/src/test/resources')], [], [], [], 'TEST'))
        }
    }
}

project(':class-byte-code') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        compile 'asm:asm-all:3.3.1'
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        compile project(':core')
    }
}

project(':properties') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        testCompile fileTree('resources')
        compile project(':core')
    }

    idea.module.iml {
        whenMerged { project ->
            project.dependencies.add(
                    new org.gradle.plugins.ide.idea.model.ModuleLibrary(
                            [new org.gradle.plugins.ide.idea.model.Path('file://$MODULE_DIR$/src/test/resources')], [], [], [], 'TEST'))
        }
    }
}

project(':css') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        testCompile fileTree('resources')
        testCompile project(':test-ext')
        compile project(':core-parser')
    }

    idea.module.iml {
        whenMerged { project ->
            project.dependencies.add(
                    new org.gradle.plugins.ide.idea.model.ModuleLibrary(
                            [new org.gradle.plugins.ide.idea.model.Path('file://$MODULE_DIR$/src/test/resources')], [], [], [], 'TEST'))
        }
    }
}


project(':java-source') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        testCompile fileTree('resources')
        testCompile project(':test-ext')
        compile project(':core-parser')
    }

    idea.module.iml {
        whenMerged { project ->
            project.dependencies.add(
                    new org.gradle.plugins.ide.idea.model.ModuleLibrary(
                            [new org.gradle.plugins.ide.idea.model.Path('file://$MODULE_DIR$/src/test/resources')], [], [], [], 'TEST'))
        }
    }
}

project(':class-object') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        compile project(':core')
    }
}

project(':api-groovy') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        compile project(':core')
    }
}


project(':api-java') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        compile "org.hamcrest:hamcrest-core:1.+"
        testCompile "junit:junit:4.11"
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
        testCompile 'cglib:cglib-nodep:2.2'
        testCompile 'org.objenesis:objenesis:1.2'
        compile project(':core')
    }
}

project(':examples-spock') {
    dependencies {
        groovy "org.codehaus.groovy:groovy-all:2.2.1"
        compile "org.spockframework:spock-core:0.7-groovy-2.0"
        compile 'cglib:cglib-nodep:2.2'
        compile 'org.objenesis:objenesis:1.2'
        compile "junit:junit:4.11"
        compile 'org.jmock:jmock:2.6.0'
        compile 'org.jmock:jmock-junit4:2.+'
        compile project(':examples-resources')
        compile project(':api-groovy')
        compile project(':text')
        compile project(':properties')
        compile project(':css')
        compile project(':class-object')
        compile project(':class-byte-code')
        compile project(':java-source')
    }
}

project(':examples-junit') {
    dependencies {
        compile "junit:junit:4.11"
        compile project(':examples-resources')
        compile project(':api-java')
        compile project(':text')
        compile project(':properties')
        compile project(':css')
        compile project(':class-object')
        compile project(':class-byte-code')
        compile project(':java-source')
    }
}
