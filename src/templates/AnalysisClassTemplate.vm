#set ($name = $context.analysedClass.getSimpleName())
#set ($classname = $context.AnalysisClassName)
// Freud generated code [$classname] [${context.getDateString()}]
package $context.PackageName;

import org.langera.freud.*;
import org.langera.freud.dsl.*;
import org.langera.freud.util.collection.AnalysedObjectIterator;
#foreach($builderClass in $context.BuilderClassByDslMap.values())
#set ($package = $builderClass.getPackage())
import ${package.Name}.*;
#end
#foreach($import in $context.imports)
import $import;
#end

public class ${classname} extends AbstractAnalysis<$name, $classname>
        implements
#foreach ($dsl in $context.DslSet)
                    $dsl.SimpleName,
#end
                    Analysis
{
    public ${classname}(AnalysedObjectIterator<$name> ${name.toLowerCase()}AnalysedObjectIterator)
    {
        super(${name.toLowerCase()}AnalysedObjectIterator, ${name}.class);
    }

    protected NestedTypeAnalysisAdapter getAnalysisAdapter(final Class type, Class nestedType)
    {
        #foreach($entry in ${context.getAdapterDefByTypeMap().entrySet()})
            #set ($type = $entry.getKey())
            #set ($adapterDefList = $entry.getValue())
            if (type == ${type.SimpleName}.class)
            {
                #foreach ($adapter in $adapterDefList)
                    if (nestedType == ${adapter.getNestedType().getSimpleName()}.class)
                    {                                                
                        return ${adapter.InstantiationCode};
                    }
                #end
                return null;
            }
        #end
        return null;
    }

    //////////////////////////////////////////////////////////////////////////////////
    /// DSL

#foreach($entry in $context.BuilderClassByDslMap.entrySet())
    #set ($dslClass = $entry.getKey())
    #set ($builderClass = $entry.getValue())
    #set ($methods = ${context.getMethodDeclByDslMap().get($dslClass)})
    #foreach($method in $methods)
        public $method.Signature
        {
            $method.ReturnType builder = new ${builderClass.SimpleName}().${method.Name}(
            #foreach($param in $method.Params)
                $param
                #if($velocityHasNext)
                    ,
                #end
            #end
            );
            return builder;
        }
        
    #end
#end

}
